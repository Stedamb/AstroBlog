---
import dayjs from 'dayjs';
import { type CollectionEntry, getCollection } from 'astro:content';
import PageLayout from '@/components/layouts/PageLayout.astro';
import ArticleJsonLd from '@/components/json-ld/article.astro';
import Button from '@/components/button';
import AffixTitle from '@/components/affix-title';
import Toc from '@/components/toc';
import CodeGroupEvent from '@/components/code-group-event';
import slateConfig from '~@/slate.config';
import { getFullTitle } from '@/helpers/utils';
import 'remark-block-containers/css';
import '@/assets/style/blog.css';

export async function getStaticPaths() {
  const postEntries = await getCollection('post', ({ data }) => {
    return import.meta.env.DEV || data.draft !== true;
  });

  return postEntries.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'post'>;

const post = Astro.props;
const { Content, remarkPluginFrontmatter, headings } = await post.render();
const lastModifiedDate = dayjs(remarkPluginFrontmatter.lastModified ? remarkPluginFrontmatter.lastModified : undefined);
const lastModified = lastModifiedDate.isSame(dayjs(), 'year')
  ? lastModifiedDate.format('MMM DD')
  : lastModifiedDate.format('MMM DD, YYYY');
const pubDate = dayjs(post.data.pubDate);
const formattedPubDate = pubDate.isSame(dayjs(), 'year')
  ? pubDate.format('MMM DD')
  : pubDate.format('MMM DD, YYYY');
---

<PageLayout title={post.data.title} description={post.data.description}>
  <ArticleJsonLd
    slot="json-ld"
    title={getFullTitle(post.data.title)}
    description={post.data.description}
    pubDate={post.data.pubDate}
    lastModified={lastModifiedDate.toDate()}
  />
  <CodeGroupEvent client:only="react" />
  <AffixTitle title={post.data.title} offsetTop={100} client:idle />



  <div class="blog-content">
    <div class="mb-16">
      <h1 class="text-6xl font-title">{post.data.title}</h1>
      <div class="text-2xl font-mono flex items-center mt-2 gap-2 text-slate10">
        <span>{formattedPubDate}</span>
        {!!slateConfig.readTime && <span>Â·</span>}
        {
          slateConfig.readTime && (
            <div>{remarkPluginFrontmatter.minutesRead}</div>
          )
        }
      </div>
    </div>
    <Content />
    {
      slateConfig.lastModified && (
        <div class="text-slate8">Last edited {lastModified}</div>
      )
    }
  </div>

  <Toc
    className="fixed bottom-0 right-2 top-0 hidden w-64 xl:block"
    listClassName="px-5 pt-44 pb-14 "
    dataSource={headings}
    client:visible
  />
</PageLayout>